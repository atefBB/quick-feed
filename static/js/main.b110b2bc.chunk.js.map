{"version":3,"sources":["logo.svg","components/Episode.jsx","components/EpisodeList.jsx","components/SearchHistory.jsx","components/UserForm.jsx","components/LoadingStatus.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Episode","link","title","useState","open","setOpen","className","style","width","float","marginRight","onClick","prev","in","src","controls","autoplay","EpisodeList","cardStyle","this","props","program_title","program_description","program_image","episodes","id","styles","alt","dangerouslySetInnerHTML","__html","map","episode","i","key","Math","random","index","enclosure","url","image","description","Component","SearchHistory","React","anchorEl","setAnchorEl","handleClose","event","currentTarget","innerText","getFeed","target","elements","feed_url","value","renderItem","item","padding","aria-controls","aria-haspopup","color","keepMounted","Boolean","onClose","history","UserForm","previous_feeds","past","enabled","setEnabled","feeds","setFeeds","onSubmit","placeholder","type","name","onChange","fullWidth","variant","disabled","marginTop","LoadingStatus","fetching","statusContainer","height","display","justifyContent","alignItems","modalContainer","background","position","top","left","zIndex","modal","borderRadius","statusText","margin","logo","App","fetched","setFetched","onFetching","setFetching","previousFeeds","setPreviousFeeds","setPast","error","setError","preventDefault","parser","require","customFields","keepArray","a","parseURL","feed","items","Set","loadRSS","aria-labelledby","aria-describedby","autoFocus","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b110b2bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0b068a0a.svg\";","import React, { useState } from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { Collapse } from \"@material-ui/core\";\n\nconst Episode = ({ link, title }) => {\n  const [open, setOpen] = useState(false);\n\n  const divStyles = {\n    width: \"77vw\",\n    float: \"right\",\n    marginRight: \"1vw\",\n  };\n\n  return (\n    <div\n      className=\"list-group\"\n      style={divStyles}\n      onClick={() => setOpen((prev) => !prev)}\n    >\n      <p className=\"list-group-item list-group-item-action text-left\">\n        {title}\n      </p>\n      <Collapse in={open}>\n        <ReactAudioPlayer\n          className=\"audioPlayer\"\n          src={link}\n          controls\n          autoplay={false}\n        />\n      </Collapse>\n    </div>\n  );\n};\n\n// class Episode extends Component {\n//   divStyles = {\n//     width: \"77vw\",\n//     float: \"right\",\n//     marginRight: \"1vw\",\n//   };\n//   render() {\n//     return (\n//       <div className=\"list-group\" style={this.divStyles}>\n//         <a\n//           href={this.props.link}\n//           className=\"list-group-item list-group-item-action text-left\"\n//         >\n//           {this.props.title}\n//         </a>\n//         <Collapse>\n//           <p>{this.props.title}</p>\n//         </Collapse>\n//       </div>\n//     );\n//   }\n// }\n\nexport default Episode;\n","import React, { Component } from \"react\";\nimport Episode from \"./Episode\";\n\nclass EpisodeList extends Component {\n  cardStyle = {\n    width: \"20vw\",\n    float: \"left\",\n  };\n\n  render() {\n    const {\n      program_title,\n      program_description,\n      program_image,\n      episodes,\n    } = this.props;\n\n    return (\n      <div>\n        {episodes ? (\n          <div>\n            <div id=\"menu\" styles={{ float: \"left\" }}></div>\n            <div className=\"card\" style={this.cardStyle}>\n              <img\n                src={program_image}\n                className=\"card-img-top\"\n                alt={program_title}\n              />\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{program_title}</h5>\n                <div\n                  className=\"card-text\"\n                  dangerouslySetInnerHTML={{\n                    __html: program_description,\n                  }}\n                />\n              </div>\n            </div>\n            {episodes.map((episode, i) => (\n              <Episode\n                key={Math.random() * i}\n                index={i}\n                title={episode.title}\n                enclosure={episode.enclosure}\n                link={\n                  episode.enclosure\n                    ? episode.enclosure.url\n                    : \"json_data is null or undefined\"\n                }\n                image={program_image}\n                description={episode.description}\n              />\n            ))}\n          </div>\n        ) : (\n          <div />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default EpisodeList;\n","import React from \"react\";\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\nimport \"../App.css\";\nexport default function SearchHistory(props) {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (event) => {\n    if (event.currentTarget.innerText !== \"\")\n      props.getFeed({\n        target: {\n          elements: { feed_url: { value: event.currentTarget.innerText } },\n        },\n      });\n    setAnchorEl(null);\n  };\n\n  const renderItem = (item, i) => {\n    return (\n      <MenuItem key={i} index={i} onClick={handleClose}>\n        {item}\n      </MenuItem>\n    );\n  };\n\n  const renderMenuItems = () => {\n    return <div>{props.history.map(renderItem)}</div>;\n  };\n\n  return (\n    <div style={{ padding: \"20px 0\" }}>\n      <Button\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        Previous Feeds\n      </Button>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        {props.history ? renderMenuItems() : <div />}\n      </Menu>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport Input from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport SearchHistory from \"./SearchHistory\";\n\nconst UserForm = ({ getFeed, previous_feeds, past }) => {\n  const [enabled, setEnabled] = useState(true);\n  const [feeds, setFeeds] = useState([]);\n\n  const handleSearchChange = (event) => {\n    const { value } = event.target;\n\n    if (value === \"\") return setEnabled(true);\n\n    setEnabled(false);\n    setFeeds([...feeds, value]);\n  };\n\n  return (\n    <div>\n      <form onSubmit={getFeed}>\n        <Input\n          placeholder=\"Enter your RSS Feed here...\"\n          type=\"text\"\n          name=\"feed_url\"\n          onChange={handleSearchChange}\n          style={{\n            padding: \"0.5rem 0\",\n          }}\n          fullWidth\n        />\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={enabled}\n          style={{ marginTop: \"10px\" }}\n        >\n          Submit\n        </Button>\n        {past ? <SearchHistory getFeed={getFeed} history={previous_feeds} /> : <div></div>}\n      </form>\n    </div>\n  );\n};\n\nexport default UserForm;\n","import React from \"react\";\n\nimport logo from \"../logo.svg\";\n\nconst LoadingStatus = ({ fetching }) => {\n  const styles = {\n    statusContainer: {\n      height: \"15px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    modalContainer: {\n      width: \"100vw\",\n      height: \"100vh\",\n      background: \"rgba(0, 0, 0, 0.25)\",\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      zIndex: 1\n    },\n    modal: {\n      width: \"250px\",\n      height: \"200px\",\n      background: \"white\",\n      borderRadius: \"4px\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    statusText: {\n      margin: 0\n    }\n  };\n\n  return (\n    <div style={styles.statusContainer}>\n      {fetching ? (\n        <div style={styles.modalContainer}>\n          <div style={styles.modal}>\n            <img src={logo} alt=\"loading animation\" />\n          </div>\n        </div>\n      ) : (<div></div>)}\n    </div>\n  );\n};\n\nexport default LoadingStatus;\n","import React, { useState } from \"react\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n} from \"@material-ui/core\";\n\nimport EpisodeList from \"./components/EpisodeList\";\nimport UserForm from \"./components/UserForm\";\nimport LoadingStatus from \"./components/LoadingStatus\";\n\nimport \"./App.css\";\n\nconst App = ({ fetching }) => {\n  const [fetched, setFetched] = useState({});\n  const [onFetching, setFetching] = useState(false);\n  const [previousFeeds, setPreviousFeeds] = useState([]);\n  const [past, setPast] = useState(false);\n  const [error, setError] = useState(false);\n\n  const getFeed = (event) => {\n    setFetching((prev) => !prev);\n    if (event.preventDefault != null) event.preventDefault();\n    const feed_url = event.target.elements.feed_url.value;\n    const Parser = require(\"rss-parser\");\n    const parser = new Parser({\n      customFields: {\n        item: [[\"enclosure\", { keepArray: true }]],\n      },\n    });\n\n    const CORS_PROXY = \"https://cors.bridged.cc/\";\n\n    if (feed_url) {\n      const loadRSS = async () => {\n        try {\n          const feed = await parser.parseURL(CORS_PROXY + feed_url);\n          setFetched({\n            episodes: feed.items,\n            program_title: feed.title,\n            program_image: feed.image.url,\n            program_description: feed.description,\n          });\n          setFetching((prev) => !prev);\n          setPreviousFeeds([...new Set([...previousFeeds, feed_url])]);\n          setPast(true);\n\n          return setError(false);\n        } catch (error) {\n          setFetching(false);\n          setError(true);\n\n          return error;\n        }\n      };\n\n      return loadRSS();\n    } else {\n      return;\n    }\n  };\n\n  const handleClose = () => {\n    setFetching(false);\n    setError(false);\n  };\n\n  const renderAlert = () => (\n    <div>\n      <Dialog\n        open={error}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">Error Parsing Feed</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Please try retyping your RSS feed, or try a new one.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">quick-feed</h1>\n      </header>\n      <UserForm\n        getFeed={getFeed}\n        onClick={() => setFetching(true)}\n        past={past}\n        previous_feeds={[...previousFeeds]}\n      />\n      {error ? renderAlert() : <div />}\n      {!past ? <p>Please enter an RSS feed</p> : <div></div>}\n      <LoadingStatus fetching={onFetching} />\n\n      <EpisodeList\n        episodes={fetched.episodes}\n        program_title={fetched.program_title}\n        program_description={fetched.program_description}\n        program_image={fetched.program_image}\n        fetching={fetching}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}